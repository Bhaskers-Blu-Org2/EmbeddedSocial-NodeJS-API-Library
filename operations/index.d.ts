/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
 * the MIT License. See LICENSE in the project root for license information.
 * <autogenerated> This file was generated using AutoRest. </autogenerated>
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * Blobs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Blobs {

    /**
     * @summary Upload a blob
     *
     * If your blob is an image, use image APIs. For all other blob types, use
     * this API.
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} blob MIME encoded contents of the blob
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postBlob(authorization: string, blob: stream.Readable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PostBlobResponse>): void;
    postBlob(authorization: string, blob: stream.Readable, callback: ServiceCallback<models.PostBlobResponse>): void;

    /**
     * @summary Get blob
     *
     * @param {string} blobHandle Blob handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBlob(blobHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
    getBlob(blobHandle: string, authorization: string, callback: ServiceCallback<stream.Readable>): void;
}

/**
 * @class
 * Builds
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Builds {

    /**
     * @summary The build information for this service
     *
     * This API is meant to be called by humans for debugging
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBuildsCurrent(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildsCurrentResponse>): void;
    getBuildsCurrent(callback: ServiceCallback<models.BuildsCurrentResponse>): void;
}

/**
 * @class
 * Comments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Comments {

    /**
     * @summary Get comment
     *
     * @param {string} commentHandle Comment handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getComment(commentHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CommentView>): void;
    getComment(commentHandle: string, authorization: string, callback: ServiceCallback<models.CommentView>): void;

    /**
     * @summary Delete comment
     *
     * @param {string} commentHandle Comment handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteComment(commentHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteComment(commentHandle: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * TopicComments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface TopicComments {

    /**
     * @summary Get comments for a topic
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopicComments(topicHandle: string, authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseCommentView>): void;
    getTopicComments(topicHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseCommentView>): void;

    /**
     * @summary Create a new comment
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {object} request Post comment request
     * 
     * @param {string} [request.text] Gets or sets comment text
     * 
     * @param {string} [request.blobType] Gets or sets comment blob type. Possible
     * values include: 'Unknown', 'Image', 'Video', 'Custom'
     * 
     * @param {string} [request.blobHandle] Gets or sets comment blob handle
     * 
     * @param {string} [request.language] Gets or sets comment language
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postComment(topicHandle: string, request: models.PostCommentRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PostCommentResponse>): void;
    postComment(topicHandle: string, request: models.PostCommentRequest, authorization: string, callback: ServiceCallback<models.PostCommentResponse>): void;
}

/**
 * @class
 * Hashtags
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Hashtags {

    /**
     * @summary Get trending hashtags
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTrendingHashtags(authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string[]>): void;
    getTrendingHashtags(authorization: string, callback: ServiceCallback<string[]>): void;

    /**
     * @summary Get autocompleted hashtags
     *
     * The query string must be at least 3 characters long, and no more than 25
     * characters long.
     *
     * @param {string} query Search query
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAutocompletedHashtags(query: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string[]>): void;
    getAutocompletedHashtags(query: string, authorization: string, callback: ServiceCallback<string[]>): void;
}

/**
 * @class
 * Images
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Images {

    /**
     * @summary Upload a new image
     *
     * Images will be resized. To access a resized image, append the 1 character
     * size identifier to the blobHandle that is returned.
     * 
     * - d is 25 pixels wide
     * - h is 50 pixels wide
     * - l is 100 pixels wide
     * - p is 250 pixels wide
     * - t is 500 pixels wide
     * - x is 1000 pixels wide
     * 
     * - ImageType.UserPhoto supports d,h,l,p,t,x
     * - ImageType.ContentBlob supports d,h,l,p,t,x
     * - ImageType.AppIcon supports l
     * 
     * All resized images will maintain their aspect ratio. Any
     * orientation specified in the EXIF headers will be honored.
     *
     * @param {string} imageType Image type. Possible values include: 'UserPhoto',
     * 'ContentBlob', 'AppIcon'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} image MIME encoded contents of the image
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postImage(imageType: string, authorization: string, image: stream.Readable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PostImageResponse>): void;
    postImage(imageType: string, authorization: string, image: stream.Readable, callback: ServiceCallback<models.PostImageResponse>): void;

    /**
     * @summary Get image
     *
     * @param {string} blobHandle Blob handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getImage(blobHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
    getImage(blobHandle: string, authorization: string, callback: ServiceCallback<stream.Readable>): void;
}

/**
 * @class
 * TopicLikes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface TopicLikes {

    /**
     * @summary Get likes for topic
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLikes(topicHandle: string, authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getLikes(topicHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;

    /**
     * @summary Add like to topic
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postLike(topicHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postLike(topicHandle: string, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Remove like from topic
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteLike(topicHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteLike(topicHandle: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * ReplyLikes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface ReplyLikes {

    /**
     * @summary Get likes for reply
     *
     * @param {string} replyHandle Reply handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLikes(replyHandle: string, authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getLikes(replyHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;

    /**
     * @summary Add like to reply
     *
     * @param {string} replyHandle Reply handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postLike(replyHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postLike(replyHandle: string, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Remove like from reply
     *
     * @param {string} replyHandle Reply handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteLike(replyHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteLike(replyHandle: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * CommentLikes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface CommentLikes {

    /**
     * @summary Get likes for comment
     *
     * @param {string} commentHandle Comment handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLikes(commentHandle: string, authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getLikes(commentHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;

    /**
     * @summary Add like to comment
     *
     * @param {string} commentHandle Comment handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postLike(commentHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postLike(commentHandle: string, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Remove like from comment
     *
     * @param {string} commentHandle Comment handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteLike(commentHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteLike(commentHandle: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * MyNotifications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyNotifications {

    /**
     * @summary Update notifications status
     *
     * This API call records the most recent notification that the user has read
     * (or seen).
     * In the GET notifications API call, each notification will have
     * an unread status.
     * Any notifications that are newer than this ReadActivityHandle
     * will have an unread status of true.
     * Any notifications that correspond to this ReadActivityHandle or
     * older will have an unread status of false.
     * If this API call has never been made, then all notifications
     * will have an unread status of true.
     *
     * @param {object} request Put notifications status request
     * 
     * @param {string} [request.readActivityHandle] Gets or sets last read
     * activity handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    putNotificationsStatus(request: models.PutNotificationsStatusRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    putNotificationsStatus(request: models.PutNotificationsStatusRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get my notifications
     *
     * This gets a feed of activities.
     * This feed is time ordered, with the most recent activity first.
     * An activity is added to this feed when any user other than
     * myself does one of the following 6 actions:
     * (a) creates a comment to my topic; (b) creates a reply to my
     * comment; (c) likes my topic; (d) follows me;
     * (e) requests to follow me when I'm a private user; (f) accepts
     * my request to follow them when they are a private user.
     * Each activity has an unread status, which is controlled by
     * doing a PUT on the status API call.
     * If a user that performed the activity is deleted, then that
     * activity will no longer appear in this feed.
     * If an activity is performed on content that is then deleted,
     * that activity will no longer appear in this feed.
     * If a user has un-done an activity (e.g. unlike a previous
     * like), then that activity will no longer appear in this feed.
     * When activityType is Like, the activityHandle is the likeHandle
     * that uniquely identifies the new like.
     * When activityType is Comment, the activityHandle is the
     * commentHandle that uniquely identifies the new comment.
     * When activityType is Reply, the activityHandle is the
     * replyHandle that uniquely identifies the new reply.
     * ActivityType values of CommentPeer and ReplyPeer are currently
     * not used.
     * When activityType is Following or FollowRequest or
     * FollowAccept, the activityHandle is the relationshipHandle
     * that uniquely identifies the relationship between the two users.
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getNotifications(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseActivityView>): void;
    getNotifications(authorization: string, callback: ServiceCallback<models.FeedResponseActivityView>): void;

    /**
     * @summary Get unread notifications count
     *
     * This returns a count of activities in my notification feed that have an
     * unread status of true.
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getNotificationsCount(authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CountResponse>): void;
    getNotificationsCount(authorization: string, callback: ServiceCallback<models.CountResponse>): void;
}

/**
 * @class
 * MyPins
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyPins {

    /**
     * @summary Get my pins
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPins(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getPins(authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;

    /**
     * @summary Pin a topic
     *
     * @param {object} request Post pin request
     * 
     * @param {string} [request.topicHandle] Gets or sets topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postPin(request: models.PostPinRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postPin(request: models.PostPinRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Unpin a topic
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deletePin(topicHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deletePin(topicHandle: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * MyPushRegistrations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyPushRegistrations {

    /**
     * @summary Register for push notifications or update an existing registration
     *
     * A push notification will be generated and sent for each activity in my
     * notifications feed where the unread status is true.
     * If multiple devices register for push notifications, then all
     * those devices
     * will get push notifications.
     *
     * @param {string} platform Platform type. Possible values include: 'Windows',
     * 'Android', 'IOS'
     * 
     * @param {string} registrationId Unique registration ID provided by the
     * mobile OS.
     * You must URL encode the registration ID.
     * For Android, this is the GCM registration ID.
     * For Windows, this is the PushNotificationChannel URI.
     * For iOS, this is the device token.
     * 
     * @param {object} request Put push registration request
     * 
     * @param {date} [request.lastUpdatedTime] Gets or sets last updated time from
     * the OS
     * This is used to expire out registrations that have not been
     * updated every 30 days.
     * 
     * @param {string} [request.language] Gets or sets language of the user
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    putPushRegistration(platform: string, registrationId: string, request: models.PutPushRegistrationRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    putPushRegistration(platform: string, registrationId: string, request: models.PutPushRegistrationRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Unregister from push notifications
     *
     * @param {string} platform Platform type. Possible values include: 'Windows',
     * 'Android', 'IOS'
     * 
     * @param {string} registrationId Unique registration ID provided by the
     * mobile OS.
     * You must URL encode the registration ID.
     * For Android, this is the GCM registration ID.
     * For Windows, this is the PushNotificationChannel URI.
     * For iOS, this is the device token.
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deletePushRegistration(platform: string, registrationId: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deletePushRegistration(platform: string, registrationId: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Replies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Replies {

    /**
     * @summary Get reply
     *
     * @param {string} replyHandle Reply handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getReply(replyHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplyView>): void;
    getReply(replyHandle: string, authorization: string, callback: ServiceCallback<models.ReplyView>): void;

    /**
     * @summary Delete reply
     *
     * @param {string} replyHandle Reply handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteReply(replyHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteReply(replyHandle: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * CommentReplies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface CommentReplies {

    /**
     * @summary Get replies for a comment
     *
     * @param {string} commentHandle Comment handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getReplies(commentHandle: string, authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseReplyView>): void;
    getReplies(commentHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseReplyView>): void;

    /**
     * @summary Create a new reply
     *
     * @param {string} commentHandle Comment handle
     * 
     * @param {object} request Post reply request
     * 
     * @param {string} [request.text] Gets or sets reply text
     * 
     * @param {string} [request.language] Gets or sets reply language
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postReply(commentHandle: string, request: models.PostReplyRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PostReplyResponse>): void;
    postReply(commentHandle: string, request: models.PostReplyRequest, authorization: string, callback: ServiceCallback<models.PostReplyResponse>): void;
}

/**
 * @class
 * UserReports
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface UserReports {

    /**
     * @summary Report a user as spam, offensive, etc.
     *
     * This call allows a user to complain about another user's profile content
     * (photo, bio, name) as containing spam, offensive material, etc.
     *
     * @param {string} userHandle User handle being reported on
     * 
     * @param {object} postReportRequest Post report request
     * 
     * @param {string} [postReportRequest.reason] Gets or sets report reason.
     * Possible values include: 'ThreatsCyberbullyingHarassment',
     * 'ChildEndangermentExploitation', 'OffensiveContent',
     * 'VirusSpywareMalware', 'ContentInfringement', 'Other', 'None'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postReport(userHandle: string, postReportRequest: models.PostReportRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postReport(userHandle: string, postReportRequest: models.PostReportRequest, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * TopicReports
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface TopicReports {

    /**
     * @summary Report a topic as spam, offensive, etc.
     *
     * @param {string} topicHandle Topic handle being reported on
     * 
     * @param {object} postReportRequest Post report request
     * 
     * @param {string} [postReportRequest.reason] Gets or sets report reason.
     * Possible values include: 'ThreatsCyberbullyingHarassment',
     * 'ChildEndangermentExploitation', 'OffensiveContent',
     * 'VirusSpywareMalware', 'ContentInfringement', 'Other', 'None'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postReport(topicHandle: string, postReportRequest: models.PostReportRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postReport(topicHandle: string, postReportRequest: models.PostReportRequest, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * ReplyReports
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface ReplyReports {

    /**
     * @summary Report a reply as spam, offensive, etc.
     *
     * @param {string} replyHandle Reply handle for the reply being reported on
     * 
     * @param {object} postReportRequest Post report request
     * 
     * @param {string} [postReportRequest.reason] Gets or sets report reason.
     * Possible values include: 'ThreatsCyberbullyingHarassment',
     * 'ChildEndangermentExploitation', 'OffensiveContent',
     * 'VirusSpywareMalware', 'ContentInfringement', 'Other', 'None'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postReport(replyHandle: string, postReportRequest: models.PostReportRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postReport(replyHandle: string, postReportRequest: models.PostReportRequest, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * CommentReports
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface CommentReports {

    /**
     * @summary Report a comment as spam, offensive, etc.
     *
     * @param {string} commentHandle Comment handle for the comment being reported
     * on
     * 
     * @param {object} postReportRequest Post report request
     * 
     * @param {string} [postReportRequest.reason] Gets or sets report reason.
     * Possible values include: 'ThreatsCyberbullyingHarassment',
     * 'ChildEndangermentExploitation', 'OffensiveContent',
     * 'VirusSpywareMalware', 'ContentInfringement', 'Other', 'None'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postReport(commentHandle: string, postReportRequest: models.PostReportRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postReport(commentHandle: string, postReportRequest: models.PostReportRequest, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Search
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Search {

    /**
     * @summary Search topics with a query
     *
     * The query string will be searched across hashtags, topic titles, and topic
     * texts,
     * and matching results will be returned.
     * 
     * If the query string contains only hashtags, e.g. #foo #bar,
     * then only the hashtags
     * in topics will be searched.
     * 
     * Query string supports the following operators:
     * - suffix: "foo*"
     * - and: "foo+bar"
     * - or: "foo|bar"
     * - not: "-foo"
     * - phrase: ""foo bar""
     * - precedence: "foo+(bar|baz)"
     * You need to escape * if it is at the end of a word, and - if
     * it is at the start of a word.
     * Default behavior is to use and, so if you use whitespace to
     * separate words,
     * such as "foo bar", that is equivalent to "foo+bar".
     *
     * @param {string} query Search query
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopics(query: string, authorization: string, options: { cursor? : number, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getTopics(query: string, authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;

    /**
     * @summary Search users with a query
     *
     * The query string will be searched across the full name of users
     * and matching results will be returned.
     * 
     * Query string supports the following operators:
     * - suffix: "foo*"
     * - and: "foo+bar"
     * - or: "foo|bar"
     * - not: "-foo"
     * - phrase: ""foo bar""
     * - precedence: "foo+(bar|baz)"
     * You need to escape * if it is at the end of a word, and - if
     * it is at the start of a word.
     * Default behavior is to use and, so if you use whitespace to
     * separate words,
     * such as "foo bar", that is equivalent to "foo+bar".
     *
     * @param {string} query Search query
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getUsers(query: string, authorization: string, options: { cursor? : number, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getUsers(query: string, authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
}

/**
 * @class
 * Sessions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Sessions {

    /**
     * @summary Create a new session (sign in)
     *
     * @param {object} request Post session request
     * 
     * @param {string} [request.instanceId] Gets or sets instance id -- Unique
     * installation id of the app
     * 
     * @param {string} [request.userHandle] Gets or sets user handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postSession(request: models.PostSessionRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PostSessionResponse>): void;
    postSession(request: models.PostSessionRequest, authorization: string, callback: ServiceCallback<models.PostSessionResponse>): void;

    /**
     * @summary Delete the current session (sign out)
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSession(authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSession(authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * RequestTokens
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface RequestTokens {

    /**
     * @summary Get request token
     *
     * @param {string} identityProvider Identity provider type. Possible values
     * include: 'Facebook', 'Microsoft', 'Google', 'Twitter', 'AADS2S',
     * 'SocialPlus'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRequestToken(identityProvider: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetRequestTokenResponse>): void;
    getRequestToken(identityProvider: string, authorization: string, callback: ServiceCallback<models.GetRequestTokenResponse>): void;
}

/**
 * @class
 * UserFollowers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface UserFollowers {

    /**
     * @summary Get followers of a user
     *
     * @param {string} userHandle User handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFollowers(userHandle: string, authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getFollowers(userHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
}

/**
 * @class
 * MyPendingUsers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyPendingUsers {

    /**
     * @summary Reject follower request
     *
     * @param {string} userHandle User handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deletePendingUser(userHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deletePendingUser(userHandle: string, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get my pending users
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPendingUsers(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getPendingUsers(authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;

    /**
     * @summary Get my pending users count
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPendingUsersCount(authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CountResponse>): void;
    getPendingUsersCount(authorization: string, callback: ServiceCallback<models.CountResponse>): void;
}

/**
 * @class
 * MyFollowers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyFollowers {

    /**
     * @summary Get my followers
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFollowers(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getFollowers(authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;

    /**
     * @summary Accept follower request
     *
     * @param {object} request Post follower request
     * 
     * @param {string} [request.userHandle] Gets or sets user handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postFollower(request: models.PostFollowerRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postFollower(request: models.PostFollowerRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Remove follower
     *
     * @param {string} userHandle User handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteFollower(userHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteFollower(userHandle: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * MyFollowing
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyFollowing {

    /**
     * @summary Get the feed of users that I am following
     *
     * These are the users whose topics appear on my following topics feed, and
     * whose activities
     * appear on my following activities feed.
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFollowingUsers(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getFollowingUsers(authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;

    /**
     * @summary Follow a user
     *
     * When I follow a user, that user will appear on my following feed. That feed
     * is
     * visible to all users, unless my profile is set to private, in
     * which case only those
     * users that request to follow me and I approve will see that
     * feed. If I try to follow a
     * user with a private profile, then that private user controls
     * whether I am allowed to
     * follow them or not.
     * That user's topics will appear in my following topics feed and
     * actions
     * performed by that user will also appear in my following
     * activities feed.
     *
     * @param {object} request Post following user request
     * 
     * @param {string} [request.userHandle] Gets or sets user handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postFollowingUser(request: models.PostFollowingUserRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postFollowingUser(request: models.PostFollowingUserRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get the feed of topics that I am following
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFollowingTopics(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getFollowingTopics(authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;

    /**
     * @summary Follow a topic
     *
     * When I follow a topic, that topic will appear on my following topics feed.
     * When users
     * perform actions on the topic (such as posting comments or
     * replies), those actions will
     * appear on my following activites feed.
     *
     * @param {object} request Post following topic request
     * 
     * @param {string} [request.topicHandle] Gets or sets topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postFollowingTopic(request: models.PostFollowingTopicRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postFollowingTopic(request: models.PostFollowingTopicRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Unfollow a user
     *
     * After I unfollow a user, that user will no longer appear on my following
     * feed.
     * All of that user's previous topics will be removed from my
     * following topics feed and
     * none of their future topics will be added to that feed.
     * Their past and future activities will no longer appear in my
     * following activities feed.
     *
     * @param {string} userHandle User handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteFollowingUser(userHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteFollowingUser(userHandle: string, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Unfollow a topic
     *
     * After I unfollow a topic, that topic will no longer appear on my following
     * topics feed.
     * The past and future activities on that topic will no longer
     * appear in my following activities feed.
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteFollowingTopic(topicHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteFollowingTopic(topicHandle: string, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Remove a topic from my combined following topics feed.
     *
     * My combined following topics feed is a feed of topics I am explicitly
     * following, combined with topics created by all users
     * that I am following.  This call will remove the specified topic
     * from that feed.
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteTopicFromCombinedFollowingFeed(topicHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteTopicFromCombinedFollowingFeed(topicHandle: string, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get my combined following topics feed.
     *
     * My combined following topics feed includes:
     * (1) topics that I'm explicitly following and
     * (2) topics authored by users that I'm following
     * 
     * This feed is time ordered, with the most recent topic first.
     * This feed will not include topics that I have explicitly
     * deleted from this feed.
     * When I follow a user, a limited set of their past topics will
     * be added to this feed,
     * and all their future topics will be added to this feed when
     * they are created.
     * When I unfollow a user, all of their previous topics will be
     * removed from the feed and
     * none of their future topics will be added to this feed.
     * When I follow a topic, it will appear in this feed.
     * When I unfollow a topic, it will no longer appear in this feed.
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopics(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getTopics(authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;

    /**
     * @summary Get the feed of activities by users that I'm following or on
     * topics that I'm following.
     *
     * My following activity feed is a list of activities that are either
     * (1) performed by users that I am following, or
     * (2) performed on topics that I am following.
     * This feed is time ordered, with the most recent activity first.
     * An activity is added to this feed when a user I am following
     * does one of the following 4 actions:
     * (a) create a comment; (b) create a reply; (c) like a topic; (d)
     * follow a user.
     * If a user that I am following is deleted, then their past
     * activities will no longer appear in this feed.
     * If an activity is performed on content that is then deleted,
     * that activity will no longer appear in this feed.
     * If a user has un-done an activity (e.g. unlike a previous
     * like), then that activity will no longer appear in this feed.
     * Similarly, an activity is added to this feed when a user does
     * one of the following 3 actions on a topic that I am following:
     * (a) create a comment; (b) create a reply; (c) like the topic.
     * If a topic that I am following is deleted, then past activities
     * on that topic will no longer appear in this feed.
     * If an activity that is performed is then deleted, that activity
     * will no longer appear in this feed.
     * Ignore the unread status of each activity - it will always be
     * true.
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getActivities(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseActivityView>): void;
    getActivities(authorization: string, callback: ServiceCallback<models.FeedResponseActivityView>): void;
}

/**
 * @class
 * MyBlockedUsers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyBlockedUsers {

    /**
     * @summary Get my blocked users
     *
     * This is a feed of users that I have blocked. Any user on this list
     * cannot see topics authored by me. However, any such user will
     * see comments
     * and replies that I create on topics authored by other users or
     * by the app.
     * Any such user will also be able to observe that activities have
     * been performed
     * by users on my topics.
     * I will not appear in any such user's following feed, and those
     * users will not
     * appear in my followers feed.
     * If I am following any user in this feed, that relationship will
     * continue and I
     * will continue to see topics and activities by that user and I
     * will appear in
     * that user's follower feed and that user will appear in my
     * following feed.
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBlockedUsers(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getBlockedUsers(authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;

    /**
     * @summary Block a user
     *
     * After I block a user, that user will no longer be able to see topics
     * authored by me.
     * However, that user will continue to see comments and replies
     * that I create on
     * topics authored by other users or by the app. That user will
     * also be able to observe
     * that activities have been performed by users on my topics.
     * I will no longer appear in that user's following feed, and that
     * user will no longer
     * appear in my followers feed.
     * If I am following that user, that relationship will survive and
     * I will continue to see
     * topics and activities by that user and I will appear in that
     * user's follower feed and
     * that user will appear in my following feed.
     *
     * @param {object} request Post blocked user request
     * 
     * @param {string} [request.userHandle] Gets or sets user handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postBlockedUser(request: models.PostBlockedUserRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postBlockedUser(request: models.PostBlockedUserRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Unblock a user
     *
     * @param {string} userHandle User handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteBlockedUser(userHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteBlockedUser(userHandle: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * UserFollowing
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface UserFollowing {

    /**
     * @summary Get following users of a user
     *
     * @param {string} userHandle User handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFollowing(userHandle: string, authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getFollowing(userHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
}

/**
 * @class
 * Topics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Topics {

    /**
     * @summary Get recent topics
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopics(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getTopics(authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;

    /**
     * @summary Create a new topic
     *
     * @param {object} request Post topic request
     * 
     * @param {string} [request.publisherType] Gets or sets publisher type.
     * Possible values include: 'User', 'App'
     * 
     * @param {string} [request.title] Gets or sets topic title
     * 
     * @param {string} [request.text] Gets or sets topic text
     * 
     * @param {string} [request.blobType] Gets or sets topic blob type. Possible
     * values include: 'Unknown', 'Image', 'Video', 'Custom'
     * 
     * @param {string} [request.blobHandle] Gets or sets topic blob handle
     * 
     * @param {string} [request.categories] Gets or sets topic categories
     * 
     * @param {string} [request.language] Gets or sets topic language
     * 
     * @param {string} [request.deepLink] Gets or sets topic deep link
     * 
     * @param {string} [request.friendlyName] Gets or sets topic friendly name
     * 
     * @param {string} [request.group] Gets or sets topic group
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postTopic(request: models.PostTopicRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PostTopicResponse>): void;
    postTopic(request: models.PostTopicRequest, authorization: string, callback: ServiceCallback<models.PostTopicResponse>): void;

    /**
     * @summary Get topic
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopic(topicHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopicView>): void;
    getTopic(topicHandle: string, authorization: string, callback: ServiceCallback<models.TopicView>): void;

    /**
     * @summary Update topic
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {object} request Put topic request
     * 
     * @param {string} [request.title] Gets or sets topic title
     * 
     * @param {string} [request.text] Gets or sets topic text
     * 
     * @param {string} [request.categories] Gets or sets topic categories
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    putTopic(topicHandle: string, request: models.PutTopicRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    putTopic(topicHandle: string, request: models.PutTopicRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Delete topic
     *
     * @param {string} topicHandle Topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteTopic(topicHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteTopic(topicHandle: string, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get popular topics today
     *
     * @param {string} timeRange Time range. Possible values include: 'Today',
     * 'ThisWeek', 'ThisMonth', 'AllTime'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPopularTopics(timeRange: string, authorization: string, options: { cursor? : number, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getPopularTopics(timeRange: string, authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;

    /**
     * @summary Get featured topics
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFeaturedTopics(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getFeaturedTopics(authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;

    /**
     * @summary Create a topic name
     *
     * @param {object} request Post topic name request
     * 
     * @param {string} [request.publisherType] Gets or sets publisher type.
     * Possible values include: 'User', 'App'
     * 
     * @param {string} [request.topicName] Gets or sets topic name
     * 
     * @param {string} [request.topicHandle] Gets or sets topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postTopicName(request: models.PostTopicNameRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postTopicName(request: models.PostTopicNameRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get a topic name
     *
     * @param {string} topicName Topic name
     * 
     * @param {string} publisherType Publisher type. Possible values include:
     * 'User', 'App'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopicName(topicName: string, publisherType: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetTopicNameResponse>): void;
    getTopicName(topicName: string, publisherType: string, authorization: string, callback: ServiceCallback<models.GetTopicNameResponse>): void;

    /**
     * @summary Update a topic name
     *
     * @param {string} topicName Topic name
     * 
     * @param {object} request Update topic name request
     * 
     * @param {string} [request.publisherType] Gets or sets publisher type.
     * Possible values include: 'User', 'App'
     * 
     * @param {string} [request.topicHandle] Gets or sets topic handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    putTopicName(topicName: string, request: models.PutTopicNameRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    putTopicName(topicName: string, request: models.PutTopicNameRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Delete a topic name
     *
     * @param {string} topicName Topic name
     * 
     * @param {object} request Delete topic request
     * 
     * @param {string} [request.publisherType] Gets or sets publisher type.
     * Possible values include: 'User', 'App'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteTopicName(topicName: string, request: models.DeleteTopicNameRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteTopicName(topicName: string, request: models.DeleteTopicNameRequest, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * MyTopics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyTopics {

    /**
     * @summary Get my topics sorted by creation time
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopics(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getTopics(authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;

    /**
     * @summary Get my topics sorted by popularity
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPopularTopics(authorization: string, options: { cursor? : number, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getPopularTopics(authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;
}

/**
 * @class
 * MyAppFollowing
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyAppFollowing {

    /**
     * @summary Find users the current user is following in another app but not in
     * the current app
     *
     * @param {string} appHandle App handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getUsers(appHandle: string, authorization: string, options: { cursor? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
    getUsers(appHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseUserCompactView>): void;
}

/**
 * @class
 * MyApps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyApps {

    /**
     * @summary Get my list of Social Plus apps
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getApps(authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppCompactView[]>): void;
    getApps(authorization: string, callback: ServiceCallback<models.AppCompactView[]>): void;
}

/**
 * @class
 * MyLikes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyLikes {

    /**
     * @summary Get my liked topics.
     *
     * Not yet implemented.
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLikedTopics(authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getLikedTopics(authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;
}

/**
 * @class
 * MyLinkedAccounts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface MyLinkedAccounts {

    /**
     * @summary Get linked accounts. Each user has at least two linked accounts:
     * one SocialPlus account, and one (or more) third-party account.
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLinkedAccounts(authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkedAccountView[]>): void;
    getLinkedAccounts(authorization: string, callback: ServiceCallback<models.LinkedAccountView[]>): void;

    /**
     * @summary Create a new linked account.
     * The account to be linked must appear in the Auth header of the
     * request. This new third-party account
     * will be linked against the credentials appearing in the session
     * token passed in the body of the request.
     *
     * @param {object} request Post linked account request
     * 
     * @param {string} [request.sessionToken] Gets or sets a session token.
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postLinkedAccount(request: models.PostLinkedAccountRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postLinkedAccount(request: models.PostLinkedAccountRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Delete linked account
     *
     * @param {string} identityProvider Identity provider type. Possible values
     * include: 'Facebook', 'Microsoft', 'Google', 'Twitter', 'AADS2S',
     * 'SocialPlus'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteLinkedAccount(identityProvider: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteLinkedAccount(identityProvider: string, authorization: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface Users {

    /**
     * @summary Create a new user
     *
     * Create a new user and return a fresh session token
     *
     * @param {object} request Post user request
     * 
     * @param {string} [request.instanceId] Gets or sets instance id -- Unique
     * installation id of the app
     * 
     * @param {string} [request.firstName] Gets or sets first name of the user
     * 
     * @param {string} [request.lastName] Gets or sets last name of the user
     * 
     * @param {string} [request.bio] Gets or sets short bio of the user
     * 
     * @param {string} [request.photoHandle] Gets or sets photo handle of the user
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postUser(request: models.PostUserRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PostUserResponse>): void;
    postUser(request: models.PostUserRequest, authorization: string, callback: ServiceCallback<models.PostUserResponse>): void;

    /**
     * @summary Get my profile
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMyProfile(authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserProfileView>): void;
    getMyProfile(authorization: string, callback: ServiceCallback<models.UserProfileView>): void;

    /**
     * @summary Delete user
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteUser(authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteUser(authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Update user info
     *
     * @param {object} request Put user info request
     * 
     * @param {string} [request.firstName] Gets or sets first name of the user
     * 
     * @param {string} [request.lastName] Gets or sets last name of the user
     * 
     * @param {string} [request.bio] Gets or sets short bio of the user
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    putUserInfo(request: models.PutUserInfoRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    putUserInfo(request: models.PutUserInfoRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Update user photo
     *
     * @param {object} request Put user photo request
     * 
     * @param {string} [request.photoHandle] Gets or sets photo handle of the user
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    putUserPhoto(request: models.PutUserPhotoRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    putUserPhoto(request: models.PutUserPhotoRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Update user visibility
     *
     * @param {object} request Put user visibility request
     * 
     * @param {string} [request.visibility] Gets or sets visibility of the user.
     * Possible values include: 'Public', 'Private'
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    putUserVisibility(request: models.PutUserVisibilityRequest, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    putUserVisibility(request: models.PutUserVisibilityRequest, authorization: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get user profile
     *
     * @param {string} userHandle User handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getUser(userHandle: string, authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserProfileView>): void;
    getUser(userHandle: string, authorization: string, callback: ServiceCallback<models.UserProfileView>): void;

    /**
     * @summary Get popular users
     *
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPopularUsers(authorization: string, options: { cursor? : number, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseUserProfileView>): void;
    getPopularUsers(authorization: string, callback: ServiceCallback<models.FeedResponseUserProfileView>): void;
}

/**
 * @class
 * UserTopics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SocialPlusClient.
 */
export interface UserTopics {

    /**
     * @summary Get user topics sorted by creation time
     *
     * @param {string} userHandle User handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopics(userHandle: string, authorization: string, options: { cursor? : string, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getTopics(userHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;

    /**
     * @summary Get user topics sorted by popularity
     *
     * @param {string} userHandle User handle
     * 
     * @param {string} authorization Format is: "Scheme CredentialsList". Possible
     * values are:
     * 
     * - Anon AK=AppKey
     * 
     * - SocialPlus TK=SessionToken
     * 
     * - Facebook AK=AppKey|TK=AccessToken
     * 
     * - Google AK=AppKey|TK=AccessToken
     * 
     * - Twitter AK=AppKey|RT=RequestToken|TK=AccessToken
     * 
     * - Microsoft AK=AppKey|TK=AccessToken
     * 
     * - AADS2S AK=AppKey|[UH=UserHandle]|TK=AADToken
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.cursor] Current read cursor
     * 
     * @param {number} [options.limit] Number of items to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPopularTopics(userHandle: string, authorization: string, options: { cursor? : number, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeedResponseTopicView>): void;
    getPopularTopics(userHandle: string, authorization: string, callback: ServiceCallback<models.FeedResponseTopicView>): void;
}
